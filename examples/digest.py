"""
Simple News Digest Generator using Grok-3 API
Generates a world news digest and saves as Markdown file.
"""

import requests
import json
from pathlib import Path
import datetime

# Load a key from a .env-style file
def load_key(key_name, file_path):
    """Load a key from a .env-style file (format: KEY=VALUE)
    
    Args:
        key_name: The name of the key to extract
        file_path: Path to the .env-style file
        
    Returns:
        The value of the key if found, otherwise None
    """
        
    try:
        with open(file_path, 'r') as f:
            for line in f:
                line = line.strip()
                # Skip comments and empty lines
                if not line or line.startswith('#'):
                    continue
                if '=' in line and line.split('=', 1)[0].strip() == key_name:
                    return line.split('=', 1)[1].strip()
        return None
    except FileNotFoundError:
        return None

def get_api_key():
    """Get the Grok API key from the secrets file.
    
    Returns:
        str: The API key
        
    Raises:
        ValueError: If API key couldn't be found
    """
    secrets_path = Path(__file__).parent.parent / '.secrets' / 'grok_keys.env'
    api_key = load_key(key_name="GROK_API_KEY", file_path=secrets_path)
    if not api_key:
        raise ValueError(f"Could not find GROK_API_KEY in {secrets_path}")
    return api_key

def create_request_payload():
    """Create the payload for the API request.
    
    Returns:
        dict: Request payload dictionary
    """
    return {
        "messages": [
            {
                "role": "user",
                "content": "Provide me a digest of world news in the last 24 hours."
            }
        ],
        "search_parameters": {
            "mode": "auto"
        },
        "model": "grok-3-latest"
    }

def call_grok_api(api_key, payload):
    """Call the Grok API with the given payload.
    
    Args:
        api_key (str): API key for authentication
        payload (dict): Request payload
        
    Returns:
        dict: JSON response from the API
    """
    url = "https://api.x.ai/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    response = requests.post(url, headers=headers, json=payload, timeout=30)
    return response.json()

def extract_content(response_json):
    """Extract the content from the API response.
    
    Args:
        response_json (dict): The API response
        
    Returns:
        str: The extracted content
    """
    return response_json['choices'][0]['message']['content']

def format_markdown_content(content):
    """Format the content into a Markdown document.
    
    Args:
        content (str): The raw content from the API response
        
    Returns:
        str: Formatted Markdown content
    """
    markdown_content = "# World News Digest\n\n"
    markdown_content += "## Overview\n\n"
    markdown_content += "This digest summarizes global news events from the past 24 hours based on information from web sources and social media sentiment analysis by Grok-3.\n\n"
    markdown_content += "## Content\n\n"
    markdown_content += f"{content}\n\n"
    markdown_content += "## Generated by\n\n"
    markdown_content += "This digest was automatically generated using the Grok-3 API."
    return markdown_content

def save_markdown_file(content, filename):
    """Save content to a markdown file.
    
    Args:
        content (str): The formatted markdown content
        filename (Path): Path object for the output file
    """
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(content)

def ensure_output_directory():
    """Ensure the digest_responses directory exists.
    
    Returns:
        Path: Path to the output directory
    """
    responses_dir = Path(__file__).parent.parent / 'digest_responses'
    responses_dir.mkdir(exist_ok=True)
    return responses_dir

def extract_content(response_json):
    """Extract the content from the API response.
    
    Args:
        response_json (dict): The API response
        
    Returns:
        str: The extracted content
        
    Raises:
        ValueError: If content couldn't be extracted
    """
    if 'choices' in response_json and len(response_json['choices']) > 0:
        return response_json['choices'][0]['message']['content']
    raise ValueError("Could not extract content from API response")

def main():
    """Main function to execute the digest generation process."""
    # Get API key
    api_key = get_api_key()
    
    # Create payload
    payload = create_request_payload()
    
    # Call API
    response_json = call_grok_api(api_key, payload)
    
    # Extract content
    content = extract_content(response_json)
    
    # Format markdown
    markdown_content = format_markdown_content(content)
    
    # Set up output directory
    responses_dir = ensure_output_directory()
    
    # Get current date
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    
    # Save to file
    output_file = responses_dir / f"world_news_digest_{today}.md"
    save_markdown_file(markdown_content, output_file)
    
    print(f"Digest saved to: {output_file}")

# Execute main function when script is run directly
if __name__ == "__main__":
    main()
