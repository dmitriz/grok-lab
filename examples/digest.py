import os
import requests
import json
from pathlib import Path
import datetime
import re

# Load a key from a .env-style file
def load_key(key_name, file_path):
    """Load a key from a .env-style file (format: KEY=VALUE)
    
    Args:
        key_name: The name of the key to extract
        file_path: Path to the .env-style file
        
    Returns:
        The value of the key if found, otherwise None
    """
        
    try:
        with open(file_path, 'r') as f:
            for line in f:
                line = line.strip()
                # Skip comments and empty lines
                if not line or line.startswith('#'):
                    continue
                if '=' in line and line.split('=', 1)[0].strip() == key_name:
                    return line.split('=', 1)[1].strip()
        return None
    except FileNotFoundError:
        return None

# Get the Grok API key
secrets_path = Path(__file__).parent.parent / '.secrets' / 'grok_keys.env'
api_key = load_key(key_name="GROK_API_KEY", file_path=secrets_path)
if not api_key:
    raise ValueError(f"Could not find GROK_API_KEY in {secrets_path}")

url = "https://api.x.ai/v1/chat/completions"
headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {api_key}"
}
payload = {
    "messages": [
        {
            "role": "user",
            "content": "Provide me a digest of world news in the last 24 hours."
        }
    ],
    "search_parameters": {
        "mode": "auto"
    },
    "model": "grok-3-latest"
}

try:
    # Add timeout to prevent the script from hanging indefinitely
    response = requests.post(url, headers=headers, json=payload, timeout=30)
    response_json = response.json()
    print(response_json)
    
    # Save the response to a markdown file
    if 'choices' in response_json and len(response_json['choices']) > 0:
        # Extract content from response
        content = response_json['choices'][0]['message']['content']
        
        # Create digest_responses directory if it doesn't exist
        responses_dir = Path(__file__).parent.parent / 'digest_responses'
        responses_dir.mkdir(exist_ok=True)
        
        # Get current date in YYYY-MM-DD format
        today = datetime.datetime.now().strftime('%Y-%m-%d')
        
        # Format the content as markdown
        markdown_content = f"# World News Digest - {today}\n\n"
        markdown_content += "## Overview\n\n"
        markdown_content += "This digest summarizes global news events from the past 24 hours based on information from web sources and social media sentiment analysis by Grok-3.\n\n"
        markdown_content += "## Content\n\n"
        markdown_content += f"{content}\n\n"
        markdown_content += "## Generated by\n\n"
        markdown_content += f"This digest was automatically generated using the Grok-3 API on {today}."
        
        # Save to file
        output_file = responses_dir / f"world_news_digest_{today}.md"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        
        print(f"\nDigest saved to: {output_file}")
        
except requests.exceptions.Timeout:
    print("Request timed out. The API might be unresponsive.")
except requests.exceptions.RequestException as e:
    print(f"Error making request: {e}")
except json.JSONDecodeError:
    print(f"Error decoding response. Status code: {response.status_code}")
    print(f"Response content: {response.text[:500]}")
